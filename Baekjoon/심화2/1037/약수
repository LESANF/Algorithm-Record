### 약수

## 문제

양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.

## 입력

첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다. 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.

## 출력

첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.

## 예제 입력

```
6
3 4 2 12 6 8
```

## 예제 출력

```
24
```

## 내 제출

```js
처음 분기조건을 짝수, 홀수로 나누었다.

하지만 길이가 짝수일때도 여러개 나오는 수가있었다.

약수의개수가 홀수인수는 제곱수인점을 이용했다.

9, 8, 7, 6, 5 일 때 틀린답이 나왔다.

수를 정렬하면 5, 6, 7, 8, 9 이다.

양끝에 1, N 이 존재하고 5와 9를 곱하면 N을 구할 수 있다.

이 때 길이가 홀수이기때문에 조건을 제곱수(길이1)인 경우로 바꿔서 제출하니 정답처리되었다.

const fs = require("fs");
const [N, ...rest] = fs
  .readFileSync(process.platform === "linux" ? "/dev/stdin" : "예제.txt")
  .toString()
  .trim()
  .split("\n");

const sortAry = rest[0]
  .split(" ")
  .map(Number)
  .sort((a, b) => a - b);

if (sortAry.length === 1) {
  console.log(Math.pow(sortAry[0], 2));
} else {
  console.log(sortAry[0] * sortAry[sortAry.length - 1]);
}

```
